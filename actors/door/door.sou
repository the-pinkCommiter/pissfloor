/********************************************************************************
		RCP_FarMainDoor and RCP_NearMainDoor
														[ Jun 1, 1996 ]
*********************************************************************************/
#define SCALE 0.25
#define ShapeColor_main_door(R,G,B) {{R*SCALE ,G*SCALE ,B*SCALE ,0 ,R*SCALE ,G*SCALE ,B*SCALE ,0 },{ R, G, B, 0, R, G, B, 0, LIGHT_X, LIGHT_Y, LIGHT_Z, 0} }

static Lights1 light_main_door[] = {
	ShapeColor_main_door(255,255,255),
	ShapeColor_main_door(20,20,20)
};

/* ========================================================================================
		: Texture data of MainDoor.
===========================================================================================	*/
ALIGNED8 static const Texture main_door_side_txt[] = {
#include "actors/door/main_door_side_txt.rgba16.inc.c"
};

ALIGNED8 static const Texture main_door_txt[] = {
#include "actors/door/main_door_txt.rgba16.inc.c"
};

ALIGNED8 static const Texture rn_1_txt[] = {
#include "actors/door/rn_1_txt.rgba16.inc.c"
};

ALIGNED8 static const Texture rn_2_txt[] = {
#include "actors/door/rn_2_txt.rgba16.inc.c"
};

ALIGNED8 static const Texture rn_3_txt[] = {
#include "actors/door/rn_3_txt.rgba16.inc.c"
};

ALIGNED8 static const Texture rn_4_txt[] = {
#include "actors/door/rn_4_txt.rgba16.inc.c"
};

/* ========================================================================================
		: Vtx of NearMainDoor.
===========================================================================================	*/
static Vtx vtx_main_doorNear[] = {
	{    -10,      0,    -58,     0,     0,     0,   129,    0,    0,  255}, 
	{    -10,      0,     59,     0,   990,     0,   129,    0,    0,  255}, 
	{    -10,   1010,     59,     0,   990,  2012,   129,    0,    0,  255}, 
	{    -10,   1010,    -58,     0,   990,  2012,     0,  127,    0,  255}, 
	{    -10,   1010,     59,     0,     0,  2012,     0,  127,    0,  255}, 
	{    591,   1010,     59,     0,     0,     0,     0,  127,    0,  255}, 
	{    591,   1010,    -58,     0,   990,     0,     0,  127,    0,  255}, 
	{    591,      0,    -58,     0,     0,     0,     0,  129,    0,  255}, 
	{    -10,      0,     59,     0,   990,  2012,     0,  129,    0,  255}, 
	{    -10,      0,    -58,     0,     0,  2012,     0,  129,    0,  255}, 
	{    591,      0,     59,     0,   990,     0,     0,  129,    0,  255}, 
	{    591,      0,     59,     0,     0,     0,   127,    0,    0,  255}, 
	{    591,      0,    -58,     0,   990,     0,   127,    0,    0,  255}, 
	{    591,   1010,    -58,     0,   990,  2012,   127,    0,    0,  255}, 
	{    591,   1010,     59,     0,     0,  2012,   127,    0,    0,  255}, 
	{    -10,   1010,    -58,     0,     0,  2012,   129,    0,    0,  255}, 
	{    591,      0,    -58,     0,   974,  1820,     0,    0,  129,  255}, 
	{    -10,      0,    -58,     0,     0,  1816,     0,    0,  129,  255}, 
	{    -10,   1010,    -58,     0,     0,   124,     0,    0,  129,  255}, 
	{    591,   1010,    -58,     0,   974,   128,     0,    0,  129,  255}, 
	{    -10,      0,     59,     0,     0,  1816,     0,    0,  127,  255}, 
	{    591,      0,     59,     0,   974,  1812,     0,    0,  127,  255}, 
	{    591,   1010,     59,     0,   974,   132,     0,    0,  127,  255}, 
	{    -10,   1010,     59,     0,     0,   140,     0,    0,  127,  255}, 
	{    492,    491,     99,     0,     0,     0,   170,   85,   36,  255}, 
	{    437,    412,    153,     0,     0,     0,   170,   85,   36,  255}, 
	{    492,    468,    153,     0,     0,     0,   170,   85,   36,  255}, 
	{    492,    468,   -152,     0,     0,     0,   170,   85,  220,  255}, 
	{    414,    412,    -98,     0,     0,     0,   170,   85,  220,  255}, 
	{    492,    491,    -98,     0,     0,     0,   170,   85,  220,  255}, 
	{    492,    468,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    492,    357,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    437,    412,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    546,    412,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    546,    412,   -152,     0,     0,     0,    87,   84,  220,  255}, 
	{    492,    468,   -152,     0,     0,     0,    87,   84,  220,  255}, 
	{    492,    491,    -98,     0,     0,     0,    87,   84,  220,  255}, 
	{    437,    412,   -152,     0,     0,     0,   170,   85,  220,  255}, 
	{    492,    357,   -152,     0,     0,     0,    86,  171,  220,  255}, 
	{    546,    412,   -152,     0,     0,     0,    86,  171,  220,  255}, 
	{    569,    412,    -98,     0,     0,     0,    86,  171,  220,  255}, 
	{    492,    334,    -98,     0,     0,     0,    86,  171,  220,  255}, 
	{    437,    412,   -152,     0,     0,     0,   171,  171,  220,  255}, 
	{    492,    357,   -152,     0,     0,     0,   171,  171,  220,  255}, 
	{    492,    334,    -98,     0,     0,     0,   171,  171,  220,  255}, 
	{    414,    412,    -98,     0,     0,     0,   171,  171,  220,  255}, 
	{    546,    412,   -152,     0,     0,     0,    86,   84,  219,  255}, 
	{    492,    491,    -98,     0,     0,     0,    86,   84,  219,  255}, 
	{    569,    412,    -98,     0,     0,     0,    86,   84,  219,  255}, 
	{    414,    412,    -98,     0,     0,     0,   170,  170,   36,  255}, 
	{    492,    334,    -98,     0,     0,     0,   170,  170,   36,  255}, 
	{    492,    357,    -43,     0,     0,     0,   170,  170,   36,  255}, 
	{    492,    334,    -98,     0,     0,     0,    86,  171,   35,  255}, 
	{    546,    412,    -43,     0,     0,     0,    86,  171,   35,  255}, 
	{    492,    357,    -43,     0,     0,     0,    86,  171,   35,  255}, 
	{    492,    334,    -98,     0,     0,     0,    86,  171,   36,  255}, 
	{    569,    412,    -98,     0,     0,     0,    86,  171,   36,  255}, 
	{    546,    412,    -43,     0,     0,     0,    86,  171,   36,  255}, 
	{    492,    491,    -98,     0,     0,     0,   170,   85,   36,  255}, 
	{    414,    412,    -98,     0,     0,     0,   170,   85,   36,  255}, 
	{    437,    412,    -43,     0,     0,     0,   170,   85,   36,  255}, 
	{    414,    412,    -98,     0,     0,     0,   170,  170,   36,  255}, 
	{    492,    357,    -43,     0,     0,     0,   170,  170,   36,  255}, 
	{    437,    412,    -43,     0,     0,     0,   170,  170,   36,  255}, 
	{    569,    412,    -98,     0,     0,     0,    87,   84,   36,  255}, 
	{    492,    468,    -43,     0,     0,     0,    87,   84,   36,  255}, 
	{    546,    412,    -43,     0,     0,     0,    87,   84,   36,  255}, 
	{    569,    412,    -98,     0,     0,     0,    87,   85,   35,  255}, 
	{    492,    491,    -98,     0,     0,     0,    87,   85,   35,  255}, 
	{    492,    468,    -43,     0,     0,     0,    87,   85,   35,  255}, 
	{    492,    491,    -98,     0,     0,     0,   170,   85,   35,  255}, 
	{    437,    412,    -43,     0,     0,     0,   170,   85,   35,  255}, 
	{    492,    468,    -43,     0,     0,     0,   170,   85,   35,  255}, 
	{    546,    412,     44,     0,     0,     0,    87,   84,  221,  255}, 
	{    492,    468,     44,     0,     0,     0,    87,   84,  221,  255}, 
	{    492,    491,     99,     0,     0,     0,    87,   84,  221,  255}, 
	{    492,    468,    153,     0,     0,     0,     0,    0,  127,  255}, 
	{    492,    357,    153,     0,     0,     0,     0,    0,  127,  255}, 
	{    546,    412,    153,     0,     0,     0,     0,    0,  127,  255}, 
	{    437,    412,    153,     0,     0,     0,     0,    0,  127,  255}, 
	{    569,    412,     99,     0,     0,     0,    87,   84,   36,  255}, 
	{    492,    491,     99,     0,     0,     0,    87,   84,   36,  255}, 
	{    492,    468,    153,     0,     0,     0,    87,   84,   36,  255}, 
	{    492,    334,     99,     0,     0,     0,    86,  171,   36,  255}, 
	{    546,    412,    153,     0,     0,     0,    86,  171,   36,  255}, 
	{    492,    357,    153,     0,     0,     0,    86,  171,   36,  255}, 
	{    414,    412,     99,     0,     0,     0,   171,  171,   36,  255}, 
	{    492,    334,     99,     0,     0,     0,   171,  171,   36,  255}, 
	{    492,    357,    153,     0,     0,     0,   171,  171,   36,  255}, 
	{    437,    412,    153,     0,     0,     0,   171,  171,   36,  255}, 
	{    569,    412,     99,     0,     0,     0,    86,  171,   36,  255}, 
	{    569,    412,     99,     0,     0,     0,    87,   84,   37,  255}, 
	{    492,    468,    153,     0,     0,     0,    87,   84,   37,  255}, 
	{    546,    412,    153,     0,     0,     0,    87,   84,   37,  255}, 
	{    492,    491,     99,     0,     0,     0,   170,   85,   36,  255}, 
	{    414,    412,     99,     0,     0,     0,   170,   85,   36,  255}, 
	{    437,    412,    153,     0,     0,     0,   170,   85,   36,  255}, 
	{    492,    468,     44,     0,     0,     0,   170,   85,  220,  255}, 
	{    437,    412,     44,     0,     0,     0,   170,   85,  220,  255}, 
	{    414,    412,     99,     0,     0,     0,   170,   85,  220,  255}, 
	{    437,    412,     44,     0,     0,     0,   170,  170,  220,  255}, 
	{    492,    334,     99,     0,     0,     0,   170,  170,  220,  255}, 
	{    414,    412,     99,     0,     0,     0,   170,  170,  220,  255}, 
	{    492,    468,     44,     0,     0,     0,   170,   85,  221,  255}, 
	{    414,    412,     99,     0,     0,     0,   170,   85,  221,  255}, 
	{    492,    491,     99,     0,     0,     0,   170,   85,  221,  255}, 
	{    492,    357,     44,     0,     0,     0,   170,  170,  220,  255}, 
	{    492,    357,     44,     0,     0,     0,    86,  171,  221,  255}, 
	{    569,    412,     99,     0,     0,     0,    86,  171,  221,  255}, 
	{    492,    334,     99,     0,     0,     0,    86,  171,  221,  255}, 
	{    492,    357,     44,     0,     0,     0,    86,  171,  220,  255}, 
	{    546,    412,     44,     0,     0,     0,    86,  171,  220,  255}, 
	{    569,    412,     99,     0,     0,     0,    86,  171,  220,  255}, 
	{    546,    412,     44,     0,     0,     0,    87,   84,  220,  255}, 
	{    492,    491,     99,     0,     0,     0,    87,   84,  220,  255}, 
	{    569,    412,     99,     0,     0,     0,    87,   84,  220,  255}, 
};

/* ========================================================================================
		: Vtx of FarMainDoor.
===========================================================================================	*/
static Vtx vtx_main_doorFar[] = {
	{    591,      0,    -58,     0,   976,  1808,     0,    0,  129,  255}, 
	{    -10,   1010,    -58,     0,   -16,   148,     0,    0,  129,  255}, 
	{    591,   1010,    -58,     0,   990,   140,     0,    0,  129,  255}, 
	{    -10,      0,    -58,     0,   -30,  1812,     0,    0,  129,  255}, 
	{    -10,      0,     59,     0,     0,  1816,     0,    0,  127,  255}, 
	{    591,   1010,     59,     0,   974,   132,     0,    0,  127,  255}, 
	{    -10,   1010,     59,     0,     0,   140,     0,    0,  127,  255}, 
	{    591,      0,     59,     0,   974,  1812,     0,    0,  127,  255}, 
	{    492,    468,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    546,    412,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    492,    357,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    437,    412,   -152,     0,     0,     0,     0,    0,  129,  255}, 
	{    492,    468,    153,     0,     0,     0,     0,    0,  127,  255}, 
	{    492,    357,    153,     0,     0,     0,     0,    0,  127,  255}, 
	{    546,    412,    153,     0,     0,     0,     0,    0,  127,  255}, 
	{    437,    412,    153,     0,     0,     0,     0,    0,  127,  255}, 
};

/* ========================================================================================
		: NearMainDoor Gfx.
===========================================================================================	*/
Gfx RCP_NearMainDoor[] = {
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_MODULATERGB, G_CC_MODULATERGB),
	gsSPClearGeometryMode(G_SHADING_SMOOTH),
	gsDPSetTile(G_IM_FMT_RGBA,G_IM_SIZ_16b, 0, 0, 7, 0,  0,0,0, 0,0,0),

	gsSPTexture(0xffff,0xffff, 0, 0, G_ON),

	gs_Tani_SetUpTileDescrip(G_IM_FMT_RGBA,G_IM_SIZ_16b, 32, 64,  0, 0, G_TX_WRAP|G_TX_NOMIRROR, 5, G_TX_NOLOD, G_TX_WRAP|G_TX_NOMIRROR, 6, G_TX_NOLOD),
	gs_Tani_LoadTextureImage2(main_door_side_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 7),

	gsSPLight((&light_main_door[0].l[0]),1 ),
	gsSPLight((&light_main_door[0].a   ),2 ),

	gsSPVertex(&vtx_main_doorNear[0], 16, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 3, 4, 5, 0),
	gsSP1Triangle( 3, 5, 6, 0),
	gsSP1Triangle( 7, 8, 9, 0),
	gsSP1Triangle( 7,10, 8, 0),
	gsSP1Triangle(11,12,13, 0),
	gsSP1Triangle(11,13,14, 0),
	gsSP1Triangle( 0, 2,15, 0),

	gs_Tani_LoadTextureImage2(main_door_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 0),

	gsSPVertex(&vtx_main_doorNear[16],  8, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 0, 2, 3, 0),
	gsSP1Triangle( 4, 5, 6, 0),
	gsSP1Triangle( 4, 6, 7, 0),

	gsSPTexture(0xffff, 0xffff, 0, 0, G_OFF),

	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),

	gsSPLight((&light_main_door[1].l[0]),1 ),
	gsSPLight((&light_main_door[1].a   ),2 ),

	gsSPVertex(&vtx_main_doorNear[24], 14, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 3, 4, 5, 0),
	gsSP1Triangle( 6, 7, 8, 0),
	gsSP1Triangle( 6, 9, 7, 0),
	gsSP1Triangle(10,11,12, 0),
	gsSP1Triangle( 3,13, 4, 0),
	gsSPVertex(&vtx_main_doorNear[38], 14, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 0, 2, 3, 0),
	gsSP1Triangle( 4, 5, 6, 0),
	gsSP1Triangle( 4, 6, 7, 0),
	gsSP1Triangle( 8, 9,10, 0),
	gsSP1Triangle(11,12,13, 0),
	gsSPVertex(&vtx_main_doorNear[52], 15, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 3, 4, 5, 0),
	gsSP1Triangle( 6, 7, 8, 0),
	gsSP1Triangle( 9,10,11, 0),
	gsSP1Triangle(12,13,14, 0),
	gsSPVertex(&vtx_main_doorNear[67], 16, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 3, 4, 5, 0),
	gsSP1Triangle( 6, 7, 8, 0),
	gsSP1Triangle( 9,10,11, 0),
	gsSP1Triangle( 9,12,10, 0),
	gsSP1Triangle(13,14,15, 0),
	gsSPVertex(&vtx_main_doorNear[83], 14, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 3, 4, 5, 0),
	gsSP1Triangle( 3, 5, 6, 0),
	gsSP1Triangle( 0, 7, 1, 0),
	gsSP1Triangle( 8, 9,10, 0),
	gsSP1Triangle(11,12,13, 0),
	gsSPVertex(&vtx_main_doorNear[97], 16, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 3, 4, 5, 0),
	gsSP1Triangle( 6, 7, 8, 0),
	gsSP1Triangle( 3, 9, 4, 0),
	gsSP1Triangle(10,11,12, 0),
	gsSP1Triangle(13,14,15, 0),
	gsSPVertex(&vtx_main_doorNear[113],  3, 0), 
	gsSP1Triangle( 0, 1, 2, 0),

	gsSPSetGeometryMode(G_SHADING_SMOOTH),
	gsSPEndDisplayList() 
};

/* ========================================================================================
		: FarMainDoor Gfx.
===========================================================================================	*/
Gfx RCP_FarMainDoor[] = {
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_MODULATERGB, G_CC_MODULATERGB),
	gsSPClearGeometryMode(G_SHADING_SMOOTH),
	gsDPSetTile(G_IM_FMT_RGBA,G_IM_SIZ_16b, 0, 0, 7, 0,  0,0,0, 0,0,0),

	gsSPTexture(0xffff,0xffff, 0, 0, G_ON),

		gs_Tani_SetUpTileDescrip(G_IM_FMT_RGBA,G_IM_SIZ_16b, 32, 64,  0, 0, G_TX_WRAP|G_TX_NOMIRROR, 5, G_TX_NOLOD, G_TX_WRAP|G_TX_NOMIRROR, 6, G_TX_NOLOD),
		gs_Tani_LoadTextureImage2(main_door_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 0),

		gsSPLight((&light_main_door[0].l[0]),1 ),
		gsSPLight((&light_main_door[0].a   ),2 ),

		gsSPVertex(&vtx_main_doorFar[0],  8, 0), 
		gsSP1Triangle( 0, 1, 2, 0),
		gsSP1Triangle( 0, 3, 1, 0),
		gsSP1Triangle( 4, 5, 6, 0),
		gsSP1Triangle( 4, 7, 5, 0),

	gsSPTexture(0xffff, 0xffff, 0, 0, G_OFF),

	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),

	gsSPLight((&light_main_door[1].l[0]),1 ),
	gsSPLight((&light_main_door[1].a   ),2 ),

	gsSPVertex(&vtx_main_doorFar[8],  8, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 0, 2, 3, 0),
	gsSP1Triangle( 4, 5, 6, 0),
	gsSP1Triangle( 4, 7, 5, 0),

	gsSPSetGeometryMode(G_SHADING_SMOOTH),
	gsSPEndDisplayList() 
};

/* ========================================================================================
		: Room numver Vtx and Gfx.
===========================================================================================	*/
static Vtx vtx_room_no_0[] = {
	{    441,    850,     59,     0,   992,     0,     0,    0,  127,  255}, 
	{    141,    850,     59,     0,     0,     0,     0,    0,  127,  255}, 
	{    141,    550,     59,     0,     0,   992,     0,    0,  127,  255}, 
	{    441,    550,     59,     0,   992,   992,     0,    0,  127,  255}, 
};

static Gfx gfx_room_no_0[] = {
	gsSPLight((&light_main_door[0].l[0]),1 ),
	gsSPLight((&light_main_door[0].a   ),2 ),
	gsSPVertex(&vtx_room_no_0[0],  4, 0), 
	gsSP1Triangle( 0, 1, 2, 0),
	gsSP1Triangle( 0, 2, 3, 0),
	gsSPEndDisplayList() 
};

static Gfx gfx_room_no_init[] = {
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_MODULATERGBA, G_CC_MODULATERGBA),
	gsSPClearGeometryMode(G_SHADING_SMOOTH),
	gsDPSetTile(G_IM_FMT_RGBA,G_IM_SIZ_16b, 0, 0, 7, 0,  0,0,0, 0,0,0),
	gsSPTexture(0xffff,0xffff, 0, 0, G_ON),
	gs_Tani_SetUpTileDescrip(G_IM_FMT_RGBA,G_IM_SIZ_16b, 32, 32,  0, 0, G_TX_CLAMP|G_TX_NOMIRROR, 5, G_TX_NOLOD, G_TX_CLAMP|G_TX_NOMIRROR, 5, G_TX_NOLOD),
	gsSPEndDisplayList()
};

static Gfx gfx_room_no_reset[]= {
	gsSPTexture(0xffff, 0xffff, 0, 0, G_OFF),
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPSetGeometryMode(G_SHADING_SMOOTH),
	gsSPEndDisplayList() 
};

Gfx RCP_mainroom_doorA[] = {
	gsSPDisplayList(gfx_room_no_init),
	gs_Tani_LoadTextureImage2(rn_1_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 7),
	gsSPDisplayList(gfx_room_no_0),
	gsSPDisplayList(gfx_room_no_reset),
	gsSPEndDisplayList()
};

Gfx RCP_mainroom_doorB[] = {
	gsSPDisplayList(gfx_room_no_init),
	gs_Tani_LoadTextureImage2(rn_2_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 7),
	gsSPDisplayList(gfx_room_no_0),
	gsSPDisplayList(gfx_room_no_reset),
	gsSPEndDisplayList()
};

Gfx RCP_mainroom_doorC[] = {
	gsSPDisplayList(gfx_room_no_init),
	gs_Tani_LoadTextureImage2(rn_3_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 7),
	gsSPDisplayList(gfx_room_no_0),
	gsSPDisplayList(gfx_room_no_reset),
	gsSPEndDisplayList()
};

Gfx RCP_mainroom_doorD[] = {
	gsSPDisplayList(gfx_room_no_init),
	gs_Tani_LoadTextureImage2(rn_4_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 32, 0, 7),
	gsSPDisplayList(gfx_room_no_0),
	gsSPDisplayList(gfx_room_no_reset),
	gsSPEndDisplayList()
};

/**************************************************************************************


		: door animation data


 **************************************************************************************/

static short door_basedata_prm[]={	0, -300,  };

static unsigned short door_basedata_tbl[]= {
	     1,     1,	/* chn19(3) */
	     1,     0,
	     1,     0,
	     1,     0,	/* chn19(3) */
	     1,     0,
	     1,     0,
	     1,     0,	/* cube1(2) */
	     1,     0,
	     1,     0,
	     1,     0,	/* sphere2(1) */
	     1,     0,
	     1,     0,
	     1,     0,	/* sphere1(0) */
	     1,     0,
	     1,     0,
};

AnimeRecord door_basedata_anm={
	MAP_ANIM_NORMAL,	/* attr 	*/
	0,					/* code 	*/
	0,					/* start 	*/
	0,					/* loop 	*/
	80,
	4,
	door_basedata_prm,
	door_basedata_tbl
};

/* ------------------------------------------------------------	*/
/* ------------------------------------------------------------	*/

static short door_open1_prm[]={
	    0, -300,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    2,    6,    5,
	    3,    1,    0,    0,    0,   -1,   -2,   -1,
	    0,    2,    7,   13,   20,   27,   35,   43,
	   52,   61,   70,   79,   88,   97,  106,  115,
	  124,  133,  141,  149,  157,  164,  171,  177,
	  182,  187,  191,  195,  199,  202,  205,  207,
	  209,  210,  211,  211,  211,  209,  208,  205,
	  202,  198,  193,  187,  179,  168,  154,  138,
	  120,  102,   83,   64,   46,   28,   13,    0,
	   -7,   -9,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,  104,  645, 2051,
	 3499, 4019, 4484, 5417, 6475, 7595, 8718, 9781,
	10722,11481,11994,12360,12716,13061,13393,13713,
	14018,14307,14580,14836,15073,15290,15487,15662,
	15814,15941,16044,16121,16171,16192,16184,16146,
	16076,15974,15974,15974,15974,15974,15974,15974,
	15974,15974,15974,15974,15974,15974,15974,15974,
	15974,15974,15974,15974,15532,15089,14647,14205,
	13762,13320,12878,12435, 9326, 6217, 3108,    0,
	  302,  491,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    2,    6,    5,
	    3,    3,    5,    5,    5,    5,    5,    5,
	    7,   10,   15,   21,   28,   35,   43,   51,
	   60,   68,   77,   86,   95,  104,  113,  122,
	  131,  139,  148,  156,  163,  170,  177,  183,
	  188,  193,  197,  201,  204,  208,  211,  213,
	  215,  216,  217,  217,  217,  216,  214,  211,
	  208,  204,  199,  193,  185,  173,  159,  142,
	  124,  105,   86,   66,   47,   30,   13,    0,
	   -8,  -10,};

static unsigned short door_open1_tbl[]= {
	     1,     1,	/* chn19(3) */
	     1,     0,
	     1,     0,
	     1,     0,	/* chn19(3) */
	     1,     0,
	     1,     0,
	    80,     2,	/* cube1(2) */
	    80,    82,
	    80,   162,
	     1,     0,	/* sphere2(1) */
	     1,     0,
	     1,     0,
	     1,     0,	/* sphere1(0) */
	     1,     0,
	     1,     0,
};

AnimeRecord door_open1_anm={
	MAP_ANIM_ONETIME,	/* attr 	*/
	0,					/* code 	*/
	0,					/* start 	*/
	0,					/* loop 	*/
	80,
	4,
	door_open1_prm,
	door_open1_tbl
};

AnimeRecord door_close1_anm={
	MAP_ANIM_ONETIME,	/* attr 	*/
	0,					/* code 	*/
	40,					/* start 	*/
	40,					/* loop 	*/
	80,
	4,
	door_open1_prm,
	door_open1_tbl
};

/* ------------------------------------------------------------	*/
/* ------------------------------------------------------------	*/

static short door_open2_prm[]={
	    0, -300,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    3,    1,    0,   -9,  -33,
	  -63,  -90, -104,  -97,  -58,   19,  165,  382,
	  641,  917, 1180, 1404, 1562, 1626, 1616, 1577,
	 1511, 1423, 1317, 1198, 1069,  934,  798,  665,
	  539,  424,  324,  244,  187,  148,  119,   99,
	   86,   79,   79,   83,   92,  103,  116,  131,
	  145,  159,  172,  182,  188,  190,  187,  179,
	  168,  154,  138,  120,  102,   83,   64,   46,
	   28,   13,    0,   -7,   -9,   -7,   -6,   -4,
	   -1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0, 1456, 3499, 4125, 4693, 5827, 7078,
	 8393, 9719,11003,12193,13237,14080,14723,15214,
	15578,15838,16017,16140,16229,16308,16383,16443,
	16489,16520,16537,16540,16529,16504,16467,16416,
	16353,16276,16188,16087,15974,15974,15974,15974,
	15974,15974,15974,15974,15974,15974,15974,15974,
	15974,15974,15974,15974,15974,15974,15974,15532,
	15089,14647,14205,13762,13320,12878,12435, 9326,
	 6217, 3108,    0,  302,  491,  589,  616,  532,
	  311,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    3,    1,    0,   -9,  -33,
	  -63,  -91, -105,  -98,  -59,   19,  166,  384,
	  645,  922, 1187, 1413, 1572, 1636, 1627, 1587,
	 1521, 1433, 1327, 1207, 1078,  942,  806,  672,
	  546,  430,  330,  250,  193,  154,  125,  104,
	   91,   85,   85,   89,   98,  109,  122,  137,
	  152,  166,  178,  188,  194,  196,  193,  185,
	  173,  159,  142,  124,  105,   86,   66,   47,
	   30,   13,    0,   -8,  -10,   -9,   -8,   -5,
	   -2,    0,};

static unsigned short door_open2_tbl[]= {
	     1,     1,	/* chn19(3) */
	     1,     0,
	     1,     0,
	     1,     0,	/* chn19(3) */
	     1,     0,
	     1,     0,
	    80,     2,	/* cube1(2) */
	    80,    82,
	    80,   162,
	     1,     0,	/* sphere2(1) */
	     1,     0,
	     1,     0,
	     1,     0,	/* sphere1(0) */
	     1,     0,
	     1,     0,
};

AnimeRecord door_open2_anm={
	MAP_ANIM_NORMAL,	/* attr 	*/
	0,					/* code 	*/
	0,					/* start 	*/
	0,					/* loop 	*/
	80,
	4,
	door_open2_prm,
	door_open2_tbl
};

AnimeRecord door_close2_anm={
	MAP_ANIM_ONETIME,	/* attr 	*/
	0,					/* code 	*/
	40,					/* start 	*/
	40,					/* loop 	*/
	80,
	4,
	door_open2_prm,
	door_open2_tbl
};

AnimePtr door_anime[] = {
	&door_basedata_anm,
	&door_open1_anm,
	&door_open2_anm,
	&door_close1_anm,
	&door_close2_anm,
	NULL					/* for pad */
};
